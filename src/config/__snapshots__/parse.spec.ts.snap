// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should reject invalid config 0 1`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "isDefined": "thermometer should not be null or undefined",
    },
    "property": "thermometer",
    "target": Config {},
    "value": undefined,
  },
  ValidationError {
    "children": [],
    "constraints": {
      "isDefined": "wattrouter should not be null or undefined",
    },
    "property": "wattrouter",
    "target": Config {},
    "value": undefined,
  },
]
`;

exports[`should reject invalid config 1 1`] = `
[
  ValidationError {
    "children": [
      ValidationError {
        "children": [],
        "constraints": {
          "isDefined": "dataSourceUrl should not be null or undefined",
          "isString": "dataSourceUrl must be a string",
          "isUrl": "dataSourceUrl must be an URL address",
        },
        "property": "dataSourceUrl",
        "target": ConfigThermometer {},
        "value": undefined,
      },
      ValidationError {
        "children": [],
        "constraints": {
          "isDefined": "enmon should not be null or undefined",
        },
        "property": "enmon",
        "target": ConfigThermometer {},
        "value": undefined,
      },
    ],
    "property": "thermometer",
    "target": Config {
      "thermometer": ConfigThermometer {},
      "wattrouter": ConfigWattrouter {},
    },
    "value": ConfigThermometer {},
  },
  ValidationError {
    "children": [
      ValidationError {
        "children": [],
        "constraints": {
          "isDefined": "baseURL should not be null or undefined",
          "isString": "baseURL must be a string",
          "isUrl": "baseURL must be an URL address",
        },
        "property": "baseURL",
        "target": ConfigWattrouter {},
        "value": undefined,
      },
      ValidationError {
        "children": [],
        "constraints": {
          "isDefined": "enmon should not be null or undefined",
        },
        "property": "enmon",
        "target": ConfigWattrouter {},
        "value": undefined,
      },
    ],
    "property": "wattrouter",
    "target": Config {
      "thermometer": ConfigThermometer {},
      "wattrouter": ConfigWattrouter {},
    },
    "value": ConfigWattrouter {},
  },
]
`;

exports[`should reject invalid config 2 1`] = `
[
  ValidationError {
    "children": [
      ValidationError {
        "children": [],
        "constraints": {
          "isUrl": "dataSourceUrl must be an URL address",
        },
        "property": "dataSourceUrl",
        "target": ConfigThermometer {
          "dataSourceUrl": "invalid URL",
          "enmon": ConfigEnmon {},
        },
        "value": "invalid URL",
      },
      ValidationError {
        "children": [
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "env should not be null or undefined",
              "isEnum": "env must be a valid enum value",
            },
            "property": "env",
            "target": ConfigEnmon {},
            "value": undefined,
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "customerId should not be null or undefined",
              "isMongoId": "customerId must be a mongodb id",
              "isString": "customerId must be a string",
            },
            "property": "customerId",
            "target": ConfigEnmon {},
            "value": undefined,
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "devEUI should not be null or undefined",
              "isNotEmpty": "devEUI should not be empty",
              "isString": "devEUI must be a string",
            },
            "property": "devEUI",
            "target": ConfigEnmon {},
            "value": undefined,
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "token should not be null or undefined",
              "isNotEmpty": "token should not be empty",
              "isString": "token must be a string",
            },
            "property": "token",
            "target": ConfigEnmon {},
            "value": undefined,
          },
        ],
        "property": "enmon",
        "target": ConfigThermometer {
          "dataSourceUrl": "invalid URL",
          "enmon": ConfigEnmon {},
        },
        "value": ConfigEnmon {},
      },
    ],
    "property": "thermometer",
    "target": Config {
      "thermometer": ConfigThermometer {
        "dataSourceUrl": "invalid URL",
        "enmon": ConfigEnmon {},
      },
      "wattrouter": ConfigWattrouter {
        "baseURL": "invalid URL",
        "enmon": ConfigEnmon {},
      },
    },
    "value": ConfigThermometer {
      "dataSourceUrl": "invalid URL",
      "enmon": ConfigEnmon {},
    },
  },
  ValidationError {
    "children": [
      ValidationError {
        "children": [],
        "constraints": {
          "isUrl": "baseURL must be an URL address",
        },
        "property": "baseURL",
        "target": ConfigWattrouter {
          "baseURL": "invalid URL",
          "enmon": ConfigEnmon {},
        },
        "value": "invalid URL",
      },
      ValidationError {
        "children": [
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "env should not be null or undefined",
              "isEnum": "env must be a valid enum value",
            },
            "property": "env",
            "target": ConfigEnmon {},
            "value": undefined,
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "customerId should not be null or undefined",
              "isMongoId": "customerId must be a mongodb id",
              "isString": "customerId must be a string",
            },
            "property": "customerId",
            "target": ConfigEnmon {},
            "value": undefined,
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "devEUI should not be null or undefined",
              "isNotEmpty": "devEUI should not be empty",
              "isString": "devEUI must be a string",
            },
            "property": "devEUI",
            "target": ConfigEnmon {},
            "value": undefined,
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isDefined": "token should not be null or undefined",
              "isNotEmpty": "token should not be empty",
              "isString": "token must be a string",
            },
            "property": "token",
            "target": ConfigEnmon {},
            "value": undefined,
          },
        ],
        "property": "enmon",
        "target": ConfigWattrouter {
          "baseURL": "invalid URL",
          "enmon": ConfigEnmon {},
        },
        "value": ConfigEnmon {},
      },
    ],
    "property": "wattrouter",
    "target": Config {
      "thermometer": ConfigThermometer {
        "dataSourceUrl": "invalid URL",
        "enmon": ConfigEnmon {},
      },
      "wattrouter": ConfigWattrouter {
        "baseURL": "invalid URL",
        "enmon": ConfigEnmon {},
      },
    },
    "value": ConfigWattrouter {
      "baseURL": "invalid URL",
      "enmon": ConfigEnmon {},
    },
  },
]
`;

exports[`should reject invalid config 3 1`] = `
[
  ValidationError {
    "children": [
      ValidationError {
        "children": [],
        "constraints": {
          "isUrl": "dataSourceUrl must be an URL address",
        },
        "property": "dataSourceUrl",
        "target": ConfigThermometer {
          "dataSourceUrl": "invalid URL",
          "enmon": ConfigEnmon {
            "customerId": "invalid ID",
            "devEUI": "",
            "env": "invalid EnmonEnv",
            "token": "",
          },
        },
        "value": "invalid URL",
      },
      ValidationError {
        "children": [
          ValidationError {
            "children": [],
            "constraints": {
              "isEnum": "env must be a valid enum value",
            },
            "property": "env",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "invalid EnmonEnv",
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isMongoId": "customerId must be a mongodb id",
            },
            "property": "customerId",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "invalid ID",
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isNotEmpty": "devEUI should not be empty",
            },
            "property": "devEUI",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "",
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isNotEmpty": "token should not be empty",
            },
            "property": "token",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "",
          },
        ],
        "property": "enmon",
        "target": ConfigThermometer {
          "dataSourceUrl": "invalid URL",
          "enmon": ConfigEnmon {
            "customerId": "invalid ID",
            "devEUI": "",
            "env": "invalid EnmonEnv",
            "token": "",
          },
        },
        "value": ConfigEnmon {
          "customerId": "invalid ID",
          "devEUI": "",
          "env": "invalid EnmonEnv",
          "token": "",
        },
      },
    ],
    "property": "thermometer",
    "target": Config {
      "thermometer": ConfigThermometer {
        "dataSourceUrl": "invalid URL",
        "enmon": ConfigEnmon {
          "customerId": "invalid ID",
          "devEUI": "",
          "env": "invalid EnmonEnv",
          "token": "",
        },
      },
      "wattrouter": ConfigWattrouter {
        "baseURL": "invalid URL",
        "enmon": ConfigEnmon {
          "customerId": "invalid ID",
          "devEUI": "",
          "env": "invalid EnmonEnv",
          "token": "",
        },
      },
    },
    "value": ConfigThermometer {
      "dataSourceUrl": "invalid URL",
      "enmon": ConfigEnmon {
        "customerId": "invalid ID",
        "devEUI": "",
        "env": "invalid EnmonEnv",
        "token": "",
      },
    },
  },
  ValidationError {
    "children": [
      ValidationError {
        "children": [],
        "constraints": {
          "isUrl": "baseURL must be an URL address",
        },
        "property": "baseURL",
        "target": ConfigWattrouter {
          "baseURL": "invalid URL",
          "enmon": ConfigEnmon {
            "customerId": "invalid ID",
            "devEUI": "",
            "env": "invalid EnmonEnv",
            "token": "",
          },
        },
        "value": "invalid URL",
      },
      ValidationError {
        "children": [
          ValidationError {
            "children": [],
            "constraints": {
              "isEnum": "env must be a valid enum value",
            },
            "property": "env",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "invalid EnmonEnv",
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isMongoId": "customerId must be a mongodb id",
            },
            "property": "customerId",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "invalid ID",
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isNotEmpty": "devEUI should not be empty",
            },
            "property": "devEUI",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "",
          },
          ValidationError {
            "children": [],
            "constraints": {
              "isNotEmpty": "token should not be empty",
            },
            "property": "token",
            "target": ConfigEnmon {
              "customerId": "invalid ID",
              "devEUI": "",
              "env": "invalid EnmonEnv",
              "token": "",
            },
            "value": "",
          },
        ],
        "property": "enmon",
        "target": ConfigWattrouter {
          "baseURL": "invalid URL",
          "enmon": ConfigEnmon {
            "customerId": "invalid ID",
            "devEUI": "",
            "env": "invalid EnmonEnv",
            "token": "",
          },
        },
        "value": ConfigEnmon {
          "customerId": "invalid ID",
          "devEUI": "",
          "env": "invalid EnmonEnv",
          "token": "",
        },
      },
    ],
    "property": "wattrouter",
    "target": Config {
      "thermometer": ConfigThermometer {
        "dataSourceUrl": "invalid URL",
        "enmon": ConfigEnmon {
          "customerId": "invalid ID",
          "devEUI": "",
          "env": "invalid EnmonEnv",
          "token": "",
        },
      },
      "wattrouter": ConfigWattrouter {
        "baseURL": "invalid URL",
        "enmon": ConfigEnmon {
          "customerId": "invalid ID",
          "devEUI": "",
          "env": "invalid EnmonEnv",
          "token": "",
        },
      },
    },
    "value": ConfigWattrouter {
      "baseURL": "invalid URL",
      "enmon": ConfigEnmon {
        "customerId": "invalid ID",
        "devEUI": "",
        "env": "invalid EnmonEnv",
        "token": "",
      },
    },
  },
]
`;
