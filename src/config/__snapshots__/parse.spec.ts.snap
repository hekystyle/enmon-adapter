// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`should reject invalid config 0 1`] = `
[
  {
    "code": "invalid_union",
    "message": "Invalid input",
    "path": [],
    "unionErrors": [
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "db"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "enmon"
    ],
    "message": "Required"
  },
  {
    "expected": "'UNI7xxx' | 'UNI1xxx'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon"
    ],
    "message": "Required"
  }
]],
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "expected": "'UNI7xxx' | 'UNI1xxx'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "wattrouter",
      "baseURL"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "array",
    "received": "undefined",
    "path": [
      "wattrouter",
      "targets"
    ],
    "message": "Required"
  }
]],
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "expected": "'UNI7xxx' | 'UNI1xxx'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "wattrouter",
      "baseURL"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "wattrouter",
      "enmon"
    ],
    "message": "Required"
  }
]],
    ],
  },
]
`;

exports[`should reject invalid config 1 1`] = `
[
  {
    "code": "invalid_union",
    "message": "Invalid input",
    "path": [],
    "unionErrors": [
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "db",
      "uri"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "received": "undefined",
    "path": [
      "enmon"
    ],
    "message": "Required"
  },
  {
    "received": "invalid model",
    "code": "invalid_enum_value",
    "options": [
      "UNI7xxx",
      "UNI1xxx"
    ],
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ]
  },
  {
    "expected": "'app' | 'dev'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "thermometers",
      0,
      "enmon",
      "env"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "customerId"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "devEUI"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "token"
    ],
    "message": "Required"
  }
]],
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "received": "invalid model",
    "code": "invalid_enum_value",
    "options": [
      "UNI7xxx",
      "UNI1xxx"
    ],
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ]
  },
  {
    "expected": "'app' | 'dev'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "thermometers",
      0,
      "enmon",
      "env"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "customerId"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "devEUI"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "token"
    ],
    "message": "Required"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "wattrouter",
      "baseURL"
    ]
  },
  {
    "code": "invalid_type",
    "expected": "array",
    "received": "undefined",
    "path": [
      "wattrouter",
      "targets"
    ],
    "message": "Required"
  }
]],
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "received": "invalid model",
    "code": "invalid_enum_value",
    "options": [
      "UNI7xxx",
      "UNI1xxx"
    ],
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ]
  },
  {
    "expected": "'app' | 'dev'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "thermometers",
      0,
      "enmon",
      "env"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "customerId"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "devEUI"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "thermometers",
      0,
      "enmon",
      "token"
    ],
    "message": "Required"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "wattrouter",
      "baseURL"
    ]
  },
  {
    "expected": "'app' | 'dev'",
    "received": "undefined",
    "code": "invalid_type",
    "path": [
      "wattrouter",
      "enmon",
      "env"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "wattrouter",
      "enmon",
      "customerId"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "wattrouter",
      "enmon",
      "devEUI"
    ],
    "message": "Required"
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "received": "undefined",
    "path": [
      "wattrouter",
      "enmon",
      "token"
    ],
    "message": "Required"
  }
]],
    ],
  },
]
`;

exports[`should reject invalid config 2 1`] = `
[
  {
    "code": "invalid_union",
    "message": "Invalid input",
    "path": [],
    "unionErrors": [
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "db",
      "uri"
    ]
  },
  {
    "validation": "email",
    "code": "invalid_string",
    "message": "Invalid email",
    "path": [
      "enmon",
      "contactEmail"
    ]
  },
  {
    "received": "invalid model",
    "code": "invalid_enum_value",
    "options": [
      "UNI7xxx",
      "UNI1xxx"
    ],
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ]
  },
  {
    "received": "invalid EnmonEnv",
    "code": "invalid_enum_value",
    "options": [
      "app",
      "dev"
    ],
    "path": [
      "thermometers",
      0,
      "enmon",
      "env"
    ],
    "message": "Invalid enum value. Expected 'app' | 'dev', received 'invalid EnmonEnv'"
  }
]],
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "received": "invalid model",
    "code": "invalid_enum_value",
    "options": [
      "UNI7xxx",
      "UNI1xxx"
    ],
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ]
  },
  {
    "received": "invalid EnmonEnv",
    "code": "invalid_enum_value",
    "options": [
      "app",
      "dev"
    ],
    "path": [
      "thermometers",
      0,
      "enmon",
      "env"
    ],
    "message": "Invalid enum value. Expected 'app' | 'dev', received 'invalid EnmonEnv'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "wattrouter",
      "baseURL"
    ]
  },
  {
    "code": "invalid_type",
    "expected": "array",
    "received": "undefined",
    "path": [
      "wattrouter",
      "targets"
    ],
    "message": "Required"
  }
]],
      [ZodError: [
  {
    "code": "invalid_type",
    "expected": "boolean",
    "received": "undefined",
    "path": [
      "DEV"
    ],
    "message": "Required"
  },
  {
    "received": "invalid model",
    "code": "invalid_enum_value",
    "options": [
      "UNI7xxx",
      "UNI1xxx"
    ],
    "path": [
      "thermometers",
      0,
      "model"
    ],
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl"
    ]
  },
  {
    "received": "invalid EnmonEnv",
    "code": "invalid_enum_value",
    "options": [
      "app",
      "dev"
    ],
    "path": [
      "thermometers",
      0,
      "enmon",
      "env"
    ],
    "message": "Invalid enum value. Expected 'app' | 'dev', received 'invalid EnmonEnv'"
  },
  {
    "validation": "url",
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "wattrouter",
      "baseURL"
    ]
  },
  {
    "received": "invalid EnmonEnv",
    "code": "invalid_enum_value",
    "options": [
      "app",
      "dev"
    ],
    "path": [
      "wattrouter",
      "enmon",
      "env"
    ],
    "message": "Invalid enum value. Expected 'app' | 'dev', received 'invalid EnmonEnv'"
  }
]],
    ],
  },
]
`;
