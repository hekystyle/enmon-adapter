// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`should reject invalid config 0 1`] = `
[
  {
    "code": "invalid_type",
    "expected": "'UNI7xxx' | 'UNI1xxx'",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "model",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "object",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "enmon",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "wattrouter",
      "baseURL",
    ],
    "received": "undefined",
  },
]
`;

exports[`should reject invalid config 1 1`] = `
[
  {
    "code": "invalid_enum_value",
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'",
    "options": [
      "UNI7xxx",
      "UNI1xxx",
    ],
    "path": [
      "thermometers",
      0,
      "model",
    ],
    "received": "invalid model",
  },
  {
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl",
    ],
    "validation": "url",
  },
  {
    "code": "invalid_type",
    "expected": "'app' | 'dev'",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "enmon",
      "env",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "enmon",
      "customerId",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "enmon",
      "devEUI",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "thermometers",
      0,
      "enmon",
      "token",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "wattrouter",
      "baseURL",
    ],
    "validation": "url",
  },
  {
    "code": "invalid_type",
    "expected": "'app' | 'dev'",
    "message": "Required",
    "path": [
      "wattrouter",
      "enmon",
      "env",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "wattrouter",
      "enmon",
      "customerId",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "wattrouter",
      "enmon",
      "devEUI",
    ],
    "received": "undefined",
  },
  {
    "code": "invalid_type",
    "expected": "string",
    "message": "Required",
    "path": [
      "wattrouter",
      "enmon",
      "token",
    ],
    "received": "undefined",
  },
]
`;

exports[`should reject invalid config 2 1`] = `
[
  {
    "code": "invalid_enum_value",
    "message": "Invalid enum value. Expected 'UNI7xxx' | 'UNI1xxx', received 'invalid model'",
    "options": [
      "UNI7xxx",
      "UNI1xxx",
    ],
    "path": [
      "thermometers",
      0,
      "model",
    ],
    "received": "invalid model",
  },
  {
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "thermometers",
      0,
      "dataSourceUrl",
    ],
    "validation": "url",
  },
  {
    "code": "invalid_enum_value",
    "message": "Invalid enum value. Expected 'app' | 'dev', received 'invalid EnmonEnv'",
    "options": [
      "app",
      "dev",
    ],
    "path": [
      "thermometers",
      0,
      "enmon",
      "env",
    ],
    "received": "invalid EnmonEnv",
  },
  {
    "code": "invalid_string",
    "message": "Invalid url",
    "path": [
      "wattrouter",
      "baseURL",
    ],
    "validation": "url",
  },
  {
    "code": "invalid_enum_value",
    "message": "Invalid enum value. Expected 'app' | 'dev', received 'invalid EnmonEnv'",
    "options": [
      "app",
      "dev",
    ],
    "path": [
      "wattrouter",
      "enmon",
      "env",
    ],
    "received": "invalid EnmonEnv",
  },
]
`;
